import{_ as s,o as l,c as n,O as a}from"./chunks/framework.cc2ec653.js";const C=JSON.parse('{"title":"了解EventLoop","description":"前端开发，基本都知道EventLoop。自己写一下流程，复习下","frontmatter":{"date":"2022-11-18T00:00:00.000Z","title":"了解EventLoop","tags":["javascript"],"description":"前端开发，基本都知道EventLoop。自己写一下流程，复习下"},"headers":[],"relativePath":"posts/0009.md"}'),o={name:"posts/0009.md"},p=a(`<h1 id="了解eventloop" tabindex="-1">了解EventLoop <a class="header-anchor" href="#了解eventloop" aria-label="Permalink to &quot;了解EventLoop&quot;">​</a></h1><p>前端开发，基本都知道<code>EventLoop</code>。自己写一下流程，复习下</p><p>其实就是<code>js</code>代码的执行逻辑 执行机制</p><blockquote><p>js 是单线程</p></blockquote><h2 id="进程-线程" tabindex="-1">进程 &amp; 线程 <a class="header-anchor" href="#进程-线程" aria-label="Permalink to &quot;进程 &amp; 线程&quot;">​</a></h2><p>因为一个页面的产生和交互有着很多的工作，不会放到<code>一个人身上</code>，所以针对不同的工作就出现了多个线程去干活。</p><p>一个浏览器标签页其实就是一个进程,<code>一个工厂车间</code></p><ul><li><strong>标签页进程</strong> 包含: <ul><li>GPU 渲染线程</li><li>JS 引擎线程</li><li>元素监听线程</li><li>网络请求线程(最多5~7个)</li><li>...</li></ul></li></ul><p>JS的执行有同步的也有异步</p><ul><li>同步 <ul><li>上一步未完成</li><li>下一步不会开始执行</li></ul></li><li>异步 <ul><li>上一步说了执行</li><li>下一步跟着执行</li></ul></li></ul><p>针对异步的任务，分出了两种，分别是宏任务和微任务。</p><ul><li>宏任务 <ul><li>ajax请求</li><li>setTimeout serInterval</li><li>等等</li></ul></li><li>微任务 <ul><li>queueMicrotask</li><li>Promise.then catch finally</li><li>process.nextick (node)</li><li>等等</li></ul></li></ul><h2 id="demo" tabindex="-1">demo <a class="header-anchor" href="#demo" aria-label="Permalink to &quot;demo&quot;">​</a></h2><p>先来一个<code>index.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ----------1------------</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------2------------</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------3------------</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------4------------</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------5------------</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------6------------</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span></code></pre></div><ul><li>将代码内容都做了注释，分成了块，一步一步来看流程哈</li><li><code>1</code><ul><li>这是一个同步任务 直接执行</li></ul></li><li><code>2</code><ul><li>这是一个宏任务，放入到 <code>webapi队列</code>，监听时间到了后 放入宏任务任务执行队列</li></ul></li><li><code>3</code><ul><li>这是一个同步任务 直接执行</li></ul></li><li><code>4</code><ul><li>这是一个同步任务 直接执行 看内容是在<code>Promise</code> 内容，但是是同步执行的</li></ul></li><li><code>5</code><ul><li><code>Promise.then</code>,这是一个微任务,放入到 <code>webapi队列</code> ,监听到<code>4</code>触发<code>resolve</code> 后， 放入微任务执行队列</li></ul></li><li><code>6</code><ul><li>这是一个同步任务 直接执行</li></ul></li></ul><p>同步任务下的执行：<code>1346</code></p><p>微任务执行队列里有一个<code>5</code>,微任务是<code>vip</code>，优先级级别高，微任务执行完后，才是宏任务。</p><p>后面的顺序是：<code>52</code></p><h2 id="疑问-await-的情况呢" tabindex="-1">疑问，await 的情况呢？ <a class="header-anchor" href="#疑问-await-的情况呢" aria-label="Permalink to &quot;疑问，await 的情况呢？&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------await的后面------------</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----------------------</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>思考一下执行顺序。</p><details class="details custom-block"><summary>点击展开</summary><p>3142</p></details><p>简单一句话，<code>await</code>后面的视为微任务</p><p>同步任务完成后，微任务执行。</p>`,25),e=[p];function c(t,i,r,y,F,D){return l(),n("div",null,e)}const d=s(o,[["render",c]]);export{C as __pageData,d as default};
